generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model account {
  id                BigInt  @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
}

model cart {
  id        Int        @id @default(autoincrement())
  items     cartitem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?

}

model cartitem {
  id        Int      @id @default(autoincrement())
  productId Int
  product   products @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    Int
  cart      cart     @relation(fields: [cartId], references: [id])
}

model products {
  id          Int        @id @default(autoincrement())
  description String?    @db.VarChar(500)
  imageUrl    String?    @db.VarChar(500)
  name        String?    @db.VarChar(100)
  price       Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?
  cartitem    cartitem[]
}

model session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       Int
  expires      DateTime
}

model users {
  id                         BigInt    @id @default(autoincrement())
  company_id                 BigInt
  username                   String    @db.VarChar(200)
  username_secondary         String?   @db.VarChar(200)
  email                      String?   @db.VarChar(255)
  phone                      String?   @db.VarChar(255)
  password                   String    @db.VarChar(300)
  role_id                    BigInt?
  language_id_default_choice Int?
  is_lock                    Boolean?  @default(false)
  is_default_user            Boolean   @default(false)
  created_at                 DateTime  @default(now())
  created_by                 BigInt
  updated_at                 DateTime? @db.DateTime(0)
  updated_by                 BigInt?
  is_active                  Boolean   @default(true)
  is_approved                Boolean   @default(false)
  is_temporary_password      Boolean   @default(false)
 

  @@unique([username, company_id], map: "username")
  @@index([role_id], map: "ref_role_id")
}

model verificationtoken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime
}
